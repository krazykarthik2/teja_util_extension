{"version":3,"file":"static/js/921.71a55668.chunk.js","mappings":"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","sources":["components/Games/SnakeGame.jsx","components/Games/MazeGame.jsx","components/LandingPage/Styles/Style14.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nconst DEFAULT_SNAKE = [[5, 5]];\nconst DEFAULT_DIR = \"RIGHT\"\nconst gridSize = 20; // Can be 10, 20, 25\nconst initialSpeed = 200; // Base speed for \"medium\"\n\nconst SnakeGame = () => {\n  // Configurable settings\n  \n  // Generate random food position\n  const generateFood = () => {\n    return [\n      Math.floor(Math.random() * gridSize),\n      Math.floor(Math.random() * gridSize),\n    ];\n  };\n\n  // State variables\n  const [snake, setSnake] = useState(DEFAULT_SNAKE); // Initial snake position\n  const [food, setFood] = useState(generateFood()); // Initial food position\n  const [direction, setDirection] = useState(DEFAULT_DIR); // Initial direction\n  const [speed, setSpeed] = useState(initialSpeed); // Movement speed (ms)\n  const [score, setScore] = useState(0); // Score\n  const [gameOver, setGameOver] = useState(false); // Game over flag\n\n  // Handle keyboard controls\n  const handleKeyDown = (e) => {\n    const keyMap = {\n      ArrowUp: \"UP\",\n      ArrowDown: \"DOWN\",\n      ArrowLeft: \"LEFT\",\n      ArrowRight: \"RIGHT\",\n      w: \"UP\",\n      s: \"DOWN\",\n      a: \"LEFT\",\n      d: \"RIGHT\",\n      2: \"DOWN\",\n      4: \"LEFT\",\n      6: \"RIGHT\",\n      8: \"UP\",\n    };\n    setDirection((dir) => {\n      if (keyMap[e.key] && !isOppositeDirection(dir, keyMap[e.key])) {\n        return keyMap[e.key];\n      }else return dir\n    });\n  };\n\n  // Check if the new direction is opposite to the current direction\n  const isOppositeDirection = (direction, newDirection) => {\n    const opposites = {\n      UP: \"DOWN\",\n      DOWN: \"UP\",\n      LEFT: \"RIGHT\",\n      RIGHT: \"LEFT\",\n    };\n    return opposites[direction] === newDirection;\n  };\n\n  // Move the snake\n  const moveSnake = () => {\n    const newSnake = [...snake];\n    const head = newSnake[newSnake.length - 1];\n    let newHead;\n\n    switch (direction) {\n      case \"UP\":\n        newHead = [head[0] - 1, head[1]];\n        break;\n      case \"DOWN\":\n        newHead = [head[0] + 1, head[1]];\n        break;\n      case \"LEFT\":\n        newHead = [head[0], head[1] - 1];\n        break;\n      case \"RIGHT\":\n        newHead = [head[0], head[1] + 1];\n        break;\n      default:\n        return;\n    }\n\n    // Check for collisions\n    if (\n      newHead[0] < 0 ||\n      newHead[1] < 0 ||\n      newHead[0] >= gridSize ||\n      newHead[1] >= gridSize ||\n      snake.some(\n        (segment) => segment[0] === newHead[0] && segment[1] === newHead[1]\n      )\n    ) {\n      setGameOver(true);\n      return;\n    }\n\n    newSnake.push(newHead);\n\n    // Check if food is eaten\n    if (newHead[0] === food[0] && newHead[1] === food[1]) {\n      setScore((prev) => prev + 1);\n      setFood(generateFood());\n      setSpeed((prev) => Math.max(50, prev - 10));\n    } else {\n      newSnake.shift(); // Remove tail if no food eaten\n    }\n\n    setSnake(newSnake);\n  };\n\n  // Game loop\n  useEffect(() => {\n    if (gameOver) return;\n\n    const interval = setInterval(moveSnake, speed);\n    return () => clearInterval(interval);\n  }, [snake, direction, speed, gameOver]);\n\n  // Keyboard event listener\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [direction]);\n\n  // Render the grid\n  const renderGrid = () => {\n    const grid = [];\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col < gridSize; col++) {\n        const isSnake = snake.some(\n          (segment) => segment[0] === row && segment[1] === col\n        );\n        const isFood = food[0] === row && food[1] === col;\n\n        grid.push(\n          <div\n            key={`${row}-${col}`}\n            style={{\n              width: \"20px\",\n              height: \"20px\",\n              backgroundColor: isSnake ? \"green\" : isFood ? \"red\" : \"black\",\n              border: \"1px solid #333\",\n            }}\n          ></div>\n        );\n      }\n    }\n    return grid;\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        marginTop: \"20px\",\n      }}\n    >\n      <h1>Snake Game</h1>\n      <h2>Score: {score}</h2>\n      {gameOver && <h3>Game Over! Refresh to restart.</h3>}\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${gridSize}, 20px)`,\n          backgroundColor: \"black\",\n        }}\n      >\n        {renderGrid()}\n      </div>\n      <div className=\"center gap-10\">\n        <button\n          tabIndex={-1}\n          onClick={() => {\n            setSnake([[5, 5]]);\n            setGameOver(false);\n          }}\n          accessKey=\"r\"\n        >\n          <u>R</u>estart\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SnakeGame;\n","import React, { useState, useEffect } from \"react\";\nimport \"./MazeGame.css\";\n\nconst DIRECTIONS = [\"up\", \"down\", \"left\", \"right\"];\nconst OPPOSITE = {\n  up: \"down\",\n  down: \"up\",\n  left: \"right\",\n  right: \"left\",\n};\n// Maze Generation using Recursive Backtracking\nconst generateMaze = (rows, cols) => {\n  let grid = Array.from(\n    { length: rows },\n    () => Array.from({ length: cols }, () => 1) // 1 is wall, 0 is path\n  );\n\n  // Helper functions to get random neighbors for maze generation\n  const getNeighbors = (x, y) => {\n    let neighbors = [];\n    const directions = [\n      [-2, 0],\n      [2, 0],\n      [0, -2],\n      [0, 2], // 4 possible directions\n    ];\n    for (const [dx, dy] of directions) {\n      const nx = x + dx;\n      const ny = y + dy;\n      if (nx >= 0 && nx < rows && ny >= 0 && ny < cols) {\n        neighbors.push([nx, ny]);\n      }\n    }\n    return neighbors;\n  };\n\n  // Recursive backtracking maze generation\n  const carvePath = (x, y) => {\n    grid[x][y] = 0; // 0 is path\n    const neighbors = getNeighbors(x, y);\n    // Shuffle neighbors to randomize the path generation\n    const shuffledNeighbors = neighbors.sort(() => Math.random() - 0.5);\n    for (const [nx, ny] of shuffledNeighbors) {\n      if (grid[nx][ny] === 1) {\n        grid[(x + nx) / 2][(y + ny) / 2] = 0; // Carve the path between cells\n        carvePath(nx, ny);\n      }\n    }\n  };\n\n  // Start carving from a random cell\n  carvePath(1, 1);\n  grid[0][1] = 0; // Make sure start is a path\n  grid[rows - 1][cols - 2] = 0; // Make sure end is a path\n  return grid;\n};\n\nconst generateDark = (rows, cols) => {\n  let grid = Array.from({ length: rows }, () =>\n    Array.from({ length: cols }, () => false)\n  );\n  return grid;\n};\n\nconst placePrize = (grid) => {\n  if (!grid) return;\n  let prizePlaced = false;\n  let prizePos = { x: 0, y: 0 };\n  window.dft = (r, c) => dft(r, c, grid);\n  window.grid = grid;\n  let visited = generateDark(grid.length, grid[0].length);\n  function dft(row, col, grid) {\n    if (row < 0 || col < 0 || row >= grid.length || col >= grid[0].length) {\n      return [];\n    }\n    if (visited[row][col]) return [];\n    visited[row][col] = true;\n    if (grid[row][col] == 0) {\n      return [\n        [row, col],\n        ...dft(row - 1, col, grid),\n        ...dft(row + 1, col, grid),\n        ...dft(row, col - 1, grid),\n        ...dft(row, col + 1, grid),\n      ];\n    }\n    return [];\n  }\n  const all_reachable = dft(1, 1, grid);\n  if (all_reachable.length == 0) {\n    return null;\n  }\n  const ind = Math.floor(Math.random() * all_reachable.length);\n  console.log(all_reachable[ind], ind, all_reachable);\n  prizePos.x = all_reachable[ind][0];\n  prizePos.y = all_reachable[ind][1];\n\n  return prizePos;\n};\n\n// Get illuminated area based on hero's position\nconst addIlluminated = (_ill, heroPos, grid, visionRange) => {\n  const illuminated = _ill;\n  for (let x = heroPos.x - visionRange; x <= heroPos.x + visionRange; x++) {\n    for (let y = heroPos.y - visionRange; y <= heroPos.y + visionRange; y++) {\n      if (x >= 0 && x < grid.length && y >= 0 && y < grid[0].length) {\n        _ill[x][y] = true;\n      }\n    }\n  }\n  return illuminated;\n};\nconst darknessOptions = [1, 1.2, 1.5, 1.7];\nconst darknessGuideOptions = [\"very-bright\", \"bright\", \"normal\", \"dark\"];\nconst GridGame = () => {\n  const rows = 50; // Huge maze size\n  const cols = 50;\n  const visionRange = 5; // Range of visibility around the hero\n\n  const [grid, setGrid] = useState(generateMaze(rows, cols));\n  const [gridT, setGridT] = useState([]);\n  const [heroPos, setHeroPos] = useState({ x: 1, y: 1 });\n  const [gridTheroPos, setGridTheroPos] = useState({ x: 1, y: 1 });\n  const [prizePos, setPrizePos] = useState(null);\n  const [illGrid, setIllGrid] = useState(generateDark(rows, cols));\n  const [gameOver, setGameOver] = useState(false);\n  const [autoPlay, setAutoPlay] = useState(false);\n  const [timeoutPlayObj, setTimeoutPlayObj] = useState(null);\n  const [darkness, setDarkness] = useState(0);\n  const [isBlur, setIsBlur] = useState(false);\n  function opacityDist(x1, y1, x2, y2) {\n    const sigmoid = (e) => 1 / darknessOptions[darkness] ** e;\n    const dist = Math.abs(x1 - x2) + Math.abs(y1 - y2);\n    return sigmoid(dist);\n  }\n  window.prizePos = prizePos;\n  useEffect(() => {\n    setPrizePos(placePrize(grid));\n  }, [grid]);\n\n  useEffect(() => {\n    // Update illuminated area when hero moves\n    setIllGrid((x) => addIlluminated(x, heroPos, grid, visionRange));\n  }, [heroPos, grid]);\n\n  useEffect(() => {\n    let _x_start = Math.max(heroPos.x - visionRange, 0);\n    let _y_start = Math.max(heroPos.y - visionRange, 0);\n    let _x_end = Math.min(heroPos.x + visionRange, rows - 1);\n    let _y_end = Math.min(heroPos.y + visionRange, cols - 1);\n    let _grid = grid.slice(_x_start, _x_end + 1);\n    _grid = _grid.map((row) => row.slice(_y_start, _y_end + 1));\n    for (let i = _x_start; i <= _x_end; i++) {\n      for (let j = _y_start; j <= _y_end; j++) {\n        _grid[i - _x_start][j - _y_start] = [\n          _grid[i - _x_start][j - _y_start],\n          i,\n          j,\n        ];\n      }\n    }\n    setGridT(_grid);\n    setGridTheroPos(heroPos);\n  }, [grid, heroPos, visionRange]);\n  // Handle hero movement\n  const moveHero = (direction) => {\n    const newPos = { ...heroPos };\n    switch (direction) {\n      case \"up\":\n        if (newPos.x > 0 && grid[newPos.x - 1][newPos.y] === 0) newPos.x -= 1;\n        else return false;\n        break;\n      case \"down\":\n        if (newPos.x < rows - 1 && grid[newPos.x + 1][newPos.y] === 0)\n          newPos.x += 1;\n        else return false;\n        break;\n      case \"left\":\n        if (newPos.y > 0 && grid[newPos.x][newPos.y - 1] === 0) newPos.y -= 1;\n        else return false;\n        break;\n      case \"right\":\n        if (newPos.y < cols - 1 && grid[newPos.x][newPos.y + 1] === 0)\n          newPos.y += 1;\n        else return false;\n        break;\n      default:\n        return false;\n        break;\n    }\n    setHeroPos(newPos);\n    return true;\n  };\n\n  useEffect(() => {\n    const handleKeyPress = (e) => {\n      switch (e.key) {\n        case \"w\":\n        case \"ArrowUp\":\n        case \"8\":\n          moveHero(\"up\");\n          break;\n        case \"s\":\n        case \"ArrowDown\":\n        case \"2\":\n          moveHero(\"down\");\n          break;\n        case \"a\":\n        case \"ArrowLeft\":\n        case \"4\":\n          moveHero(\"left\");\n          break;\n        case \"d\":\n        case \"ArrowRight\":\n        case \"6\":\n          moveHero(\"right\");\n          break;\n        default:\n          break;\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [heroPos]);\n\n  useEffect(() => {\n    if (!autoPlay || gameOver || !prizePos) return;\n\n    let dfsPath = [];\n    const visited = Array(rows)\n      .fill(null)\n      .map(() => Array(cols).fill(false));\n\n    const directions = [\n      { dx: -1, dy: 0, dir: \"up\" },\n      { dx: 1, dy: 0, dir: \"down\" },\n      { dx: 0, dy: -1, dir: \"left\" },\n      { dx: 0, dy: 1, dir: \"right\" },\n    ];\n\n    // DFS function\n    const dfs = (x, y, prevDir = null) => {\n      if (\n        x < 0 ||\n        y < 0 ||\n        x >= rows ||\n        y >= cols ||\n        visited[x][y] ||\n        grid[x][y] === 1\n      ) {\n        return false;\n      }\n\n      visited[x][y] = true;\n\n      // Count this as a step only if it's a junction or a change in direction\n      const validChoices = directions.filter(\n        ({ dx, dy }) =>\n          x + dx >= 0 &&\n          y + dy >= 0 &&\n          x + dx < rows &&\n          y + dy < cols &&\n          !visited[x + dx][y + dy] &&\n          grid[x + dx][y + dy] === 0\n      );\n\n      // Add to the path if it's a junction or direction changes\n      const currentDir = validChoices[0]?.dir || prevDir;\n\n      dfsPath.push({ x, y, type: \"explore\", dir: currentDir });\n\n      if (x === prizePos.x && y === prizePos.y) {\n        dfsPath.push({ x, y, type: \"prize\", dir: currentDir });\n        return true;\n      }\n\n      for (const { dx, dy, dir } of directions) {\n        if (dfs(x + dx, y + dy, dir)) {\n          return true;\n        }\n      }\n      dfsPath.push({ x, y, type: \"backtrack\", dir: OPPOSITE[prevDir] });\n\n      return false;\n    };\n\n    // Start DFS from the hero's position\n    dfs(heroPos.x, heroPos.y);\n    console.log(\"--->\", heroPos.x, heroPos.y);\n    console.log(dfsPath);\n    let currentStep = 0;\n\n    // Interval to move the hero\n    const interval = setInterval(() => {\n      if (currentStep >= dfsPath.length) {\n        clearInterval(interval);\n        return;\n      }\n\n      const { x, y, type, dir } = dfsPath[currentStep];\n      if (type === \"explore\" || type === \"backtrack\" || type === \"prize\") {\n        console.log(\"out-\", setHeroPos({ x: x, y: y }));\n      }\n      console.log(\"@step:\", currentStep);\n      currentStep++;\n    }, 100);\n\n    // Cleanup on component unmount or state change\n    return () => clearInterval(interval);\n  }, [autoPlay, prizePos, grid, gameOver]);\n\n  // Check if the hero reaches the prize\n  useEffect(() => {\n    if (!heroPos || !prizePos) return;\n    if (heroPos.x === prizePos.x && heroPos.y === prizePos.y) {\n      setGameOver(true);\n    }\n  }, [heroPos, prizePos, grid]);\n\n  const resetGame = () => {\n    setGrid(generateMaze(rows, cols)); // Regenerate maze on prize reach\n    setIllGrid(generateDark(rows, cols));\n    setHeroPos({ x: 1, y: 1 }); // Reset hero position\n  };\n  useEffect(() => {\n    if (gameOver) {\n      resetGame();\n    }\n  }, [gameOver]);\n  // Render the grid and mini map\n  return (\n    <div className=\"game-container w-full h-full\">\n      <div className=\"map-container w-full h-full\">\n        {gameOver || (\n          <div className=\"d-center w-full items-center !justify-between h-full px-10\">\n            <div className=\"full-map\">\n              <MiniMap\n                grid={grid}\n                illGrid={illGrid}\n                heroPos={heroPos}\n                prizePos={prizePos}\n              />\n            </div>\n            <div className={\"current-map \" + (isBlur ? \"-blur\" : \"\")}>\n              {gridTheroPos &&\n                gridT.map((row, rowIndex) => (\n                  <div key={rowIndex} className=\"row\">\n                    {row.map(([cell, i, j], colIndex) => (\n                      <div\n                        key={colIndex}\n                        className={`cell ${cell === 0 ? \"path\" : \"wall\"} ${\n                          gridTheroPos?.x === i && gridTheroPos?.y === j\n                            ? \"hero\"\n                            : \"\"\n                        } ${\n                          prizePos?.x === i && prizePos?.y === j ? \"prize\" : \"\"\n                        }`}\n                        style={{\n                          opacity: opacityDist(\n                            gridTheroPos.x,\n                            gridTheroPos.y,\n                            i,\n                            j\n                          ),\n                          filter: isBlur\n                            ? `blur(${\n                                6 *\n                                (1 -\n                                  opacityDist(\n                                    gridTheroPos.x,\n                                    gridTheroPos.y,\n                                    i,\n                                    j\n                                  ))\n                              }px)`\n                            : \"none\",\n                        }}\n                      >\n                        {gridTheroPos?.x === i && gridTheroPos?.y === j\n                          ? \"*\"\n                          : \"\"}\n                        {prizePos?.x === i && prizePos?.y === j ? \"💎\" : \"\"}\n                      </div>\n                    ))}\n                  </div>\n                ))}\n            </div>\n            <table className=\"options m-0\" align=\"center\">\n              <tr className=\"auto\">\n                <td>\n                  A<u>U</u>TO:\n                </td>\n                <td>\n                  <button\n                    className=\"px-2 py-1 rounded-full bg-gray-800\"\n                    onClick={() => setAutoPlay((e) => !e)}\n                    accessKey=\"u\"\n                  >\n                    {autoPlay ? \"on\" : \"off\"}\n                  </button>\n                </td>\n              </tr>\n              <tr className=\"darkness\">\n                <td>\n                  Dar<u>k</u>ness:\n                </td>\n                <td>\n                  <button\n                    className=\"darkness d-center p-2 rounded-full bg-gray-800\"\n                    accessKey=\"k\"\n                    onClick={() =>\n                      setDarkness((e) => (e + 1) % darknessOptions.length)\n                    }\n                  >\n                    {darknessGuideOptions[darkness]}\n                  </button>\n                </td>\n              </tr>\n              <tr className=\"-blur\">\n                <td>\n                  Blu<u>r</u>\n                </td>\n                <td>\n                  <button\n                    className=\"px-2 py-1 rounded-full bg-gray-800\"\n                    accessKey=\"r\"\n                    onClick={() => setIsBlur((e) => !e)}\n                  >\n                    {isBlur ? \"on\" : \"off\"}\n                  </button>\n                </td>\n              </tr>\n              <tr>\n                <td colSpan={2}>\n                  <button type=\"button\" accessKey=\"n\" onClick={resetGame}>\n                    <u>N</u>ew Game\n                  </button>\n                </td>\n              </tr>\n            </table>\n          </div>\n        )}\n        {gameOver && (\n          <div className=\"d-center stack\">\n            <div className=\"overview\">\n              {grid.map((row, i) => (\n                <div key={i} className=\"d-center stack\">\n                  {row.map((cell, j) => (\n                    <div\n                      key={j}\n                      className={`cell ${cell === 0 ? \"path\" : \"wall\"} ${\n                        prizePos?.x === i && prizePos?.y === j ? \"prize\" : \"\"\n                      }`}\n                    >\n                      {heroPos?.x === i && heroPos?.y === j ? \"d\" : \"\"}\n                      {prizePos?.x === i && prizePos?.y === j ? \"💎\" : \"\"}\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n            <button\n              type=\"button\"\n              accessKey=\"r\"\n              onClick={() => {\n                setGameOver(false);\n              }}\n            >\n              <u>R</u>e-start\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst MiniMap = ({ grid, illGrid, heroPos, prizePos }) => {\n  return (\n    <div className=\"mini-map\">\n      {grid.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"mini-row\">\n          {row.map((cell, colIndex) => (\n            <div\n              key={colIndex}\n              className={`mini-cell ${\n                illGrid[rowIndex][colIndex] ? \"illuminated\" : \"\"\n              } ${\n                heroPos.x === rowIndex && heroPos.y === colIndex ? \"hero\" : \"\"\n              } ${\n                prizePos?.x === rowIndex && prizePos?.y === colIndex\n                  ? \"prize\"\n                  : \"\"\n              }`}\n            ></div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default GridGame;\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport Terminal from \"../../Terminal/Terminal\";\nimport { GithubBtn, LoggedInAs, VersionBtn } from \"../pins\";\nimport SnakeGame from \"../../Games/SnakeGame\";\nimport { useParams } from \"react-router-dom\";\nimport MazeGame from \"../../Games/MazeGame\";\nconst Style12 = ({ hours, minutes, props, dispatch }) => {\n  const params = useParams();\n  return (\n    <div className=\"stack justify-between items-center h-screen py-10 px-5 gap-5\">\n      <div className=\"top\">GAME</div>\n\n      <div className=\"middle h-full w-full\">\n        {params?.game==\"snake\"&&\n        <SnakeGame />}\n        {params?.game==\"maze\"&&\n        <MazeGame/>}\n      </div>\n\n      <div className=\"bottom w-full justify-between stack items-center gap-2\">\n        <Terminal {...props} hidden />\n\n        <div className=\"flex justify-between items-center w-full h-full\">\n          <div className=\"left\"></div>\n          <div className=\"middle\">\n            <GithubBtn />\n          </div>\n          <div className=\"right\">\n            <VersionBtn />\n          </div>\n        </div>\n        <div className=\"bottom d-center\">\n          <LoggedInAs />\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Style12;\n"],"names":["DEFAULT_SNAKE","gridSize","SnakeGame","generateFood","Math","floor","random","snake","setSnake","useState","food","setFood","direction","setDirection","speed","setSpeed","score","setScore","gameOver","setGameOver","handleKeyDown","e","keyMap","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","w","s","a","d","dir","key","isOppositeDirection","newDirection","UP","DOWN","LEFT","RIGHT","moveSnake","newSnake","head","length","newHead","some","segment","push","prev","max","shift","useEffect","interval","setInterval","clearInterval","window","addEventListener","removeEventListener","_jsxs","style","display","flexDirection","alignItems","marginTop","children","_jsx","gridTemplateColumns","backgroundColor","renderGrid","grid","row","col","isSnake","isFood","width","height","border","className","tabIndex","onClick","accessKey","OPPOSITE","up","down","left","right","generateMaze","rows","cols","Array","from","carvePath","x","y","neighbors","getNeighbors","directions","dx","dy","nx","ny","shuffledNeighbors","sort","generateDark","darknessOptions","darknessGuideOptions","MiniMap","_ref3","illGrid","heroPos","prizePos","map","rowIndex","cell","colIndex","GridGame","setGrid","gridT","setGridT","setHeroPos","gridTheroPos","setGridTheroPos","setPrizePos","setIllGrid","autoPlay","setAutoPlay","timeoutPlayObj","setTimeoutPlayObj","darkness","setDarkness","isBlur","setIsBlur","opacityDist","x1","y1","x2","y2","dist","abs","dft","r","c","visited","all_reachable","ind","console","log","placePrize","addIlluminated","_ill","visionRange","illuminated","_x_start","_y_start","_x_end","min","_y_end","_grid","slice","i","j","moveHero","newPos","handleKeyPress","dfsPath","fill","dfs","_validChoices$","prevDir","arguments","undefined","currentDir","filter","_ref","type","currentStep","resetGame","_ref2","opacity","align","colSpan","hours","minutes","props","dispatch","params","useParams","game","MazeGame","Terminal","hidden","GithubBtn","VersionBtn","LoggedInAs"],"sourceRoot":""}